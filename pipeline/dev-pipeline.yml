#***********************************************************
# azure-pipelines-dev.yml
#
# Description:
# Pipeline to provision Terraform resources using modules
# stored in a separate repository. Modules are accessed
# via HTTPS using the System.AccessToken and Key Vault.
#
#***********************************************************

trigger:
  branches:
    include:
      - dev

resources:
  repositories:
    - repository: terraform-modules
      type: git
      name: terraform-modules
      ref: main

variables:
  - group: dev

stages:
  - stage: Terraform
    displayName: "Terraform Stage"
    jobs:
      - job: Terraform_Apply
        displayName: "Terraform Apply"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          # Install correct Terraform version
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "latest"
            displayName: "Install latest Terraform Version"

          # Configure Git extra header for System.AccessToken
          - script: |
              git config --global http.https://dev.azure.com.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"
              export GIT_CONFIG_PARAMETERS="'url.https://$(System.AccessToken)@dev.azure.com.insteadof=https://MartiGroup@dev.azure.com'"
            displayName: "Configure Git Authentication"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          # Checkout main repository (new-subscription)
          - checkout: self
            displayName: "Checkout new-subscription repo"

          # Checkout terraform-modules repository
          - checkout: terraform-modules
            displayName: "Checkout terraform-modules repo"

          # Terraform Init
          - script: |
              terraform init -reconfigure \
                -backend-config="storage_account_name=pocmarti" \
                -backend-config="container_name=terraform-state" \
                -backend-config="key=dev-terraform.tfstate"
            workingDirectory: $(System.DefaultWorkingDirectory)/new-subscription
            displayName: "Terraform Init"
            env:
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
              ARM_TENANT_ID: $(arm-tenant-id)

          # Terraform Plan
          - script: |
              terraform plan \
                -var-file=dev.tfvars
            workingDirectory: $(System.DefaultWorkingDirectory)/new-subscription
            displayName: "Terraform Plan"
            env:
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
              ARM_TENANT_ID: $(arm-tenant-id)

          # Terraform Apply
          - script: |
              terraform apply -auto-approve \
                -var-file=dev.tfvars
            workingDirectory: $(System.DefaultWorkingDirectory)/new-subscription
            displayName: "Terraform Apply"
            env:
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
              ARM_TENANT_ID: $(arm-tenant-id)

      # Terraform Destroy Job
      - job: Terraform_Destroy
        displayName: "Terraform Destroy"
        condition: eq(variables['destroy'], 'true') # Only run if 'destroy' is set to 'true'
        pool:
          vmImage: "ubuntu-latest"

        steps:
          # Configure Git Authentication
          - script: |
              git config --global http.https://dev.azure.com.extraheader "AUTHORIZATION: bearer $(System.AccessToken)"
              export GIT_CONFIG_PARAMETERS="'url.https://$(System.AccessToken)@dev.azure.com.insteadof=https://MartiGroup@dev.azure.com'"
            displayName: "Configure Git Authentication"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          # Checkout main repository (new-subscription)
          - checkout: self
            displayName: "Checkout new-subscription repo"

          # Checkout terraform-modules repository
          - checkout: terraform-modules
            displayName: "Checkout terraform-modules repo"

          # Terraform Destroy
          - script: |
              terraform destroy -auto-approve \
                -var-file=dev.tfvars
            workingDirectory: $(System.DefaultWorkingDirectory)/new-subscription
            displayName: "Terraform Destroy"
            env:
              ARM_CLIENT_ID: $(arm-client-id)
              ARM_CLIENT_SECRET: $(arm-client-secret)
              ARM_SUBSCRIPTION_ID: $(arm-subscription-id)
              ARM_TENANT_ID: $(arm-tenant-id)
              
